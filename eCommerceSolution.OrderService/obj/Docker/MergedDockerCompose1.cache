name: dockercompose211186942066952291
services:
  ecommerce.api:
    build:
      context: D:\Micro\ecommerce\eCommerceSolution.OrderService
      dockerfile: eCommerce.API/Dockerfile
      args:
        BUILD_CONFIGURATION: Debug
        LAUNCHING_FROM_VS: "true"
      labels:
        com.microsoft.created-by: visual-studio
        com.microsoft.visual-studio.project-name: eCommerce.API
      target: base
    container_name: ecommverce_orderservice
    depends_on:
      mongo_order:
        condition: service_started
        required: true
      productservice:
        condition: service_started
        required: true
      userservice:
        condition: service_started
        required: true
    entrypoint:
      - dotnet
      - --roll-forward
      - Major
      - /VSTools/DistrolessHelper/DistrolessHelper.dll
      - --wait
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
      ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: "true"
      DOTNET_USE_POLLING_FILE_WATCHER: "1"
      MONGO_HOST: mongo_order
      MONGO_PORT: "27017"
      NUGET_FALLBACK_PACKAGES: /.nuget/fallbackpackages
      PRODUCT_SERVICE_URL: http://productservice:8080
      USER_SERVICE_URL: http://userservice:9090
    image: ecommerceapi:dev
    labels:
      com.microsoft.visualstudio.debuggee.arguments: ' --additionalProbingPath /.nuget/packages --additionalProbingPath /.nuget/fallbackpackages  "/app/bin/Debug/net9.0/eCommerce.API.dll"'
      com.microsoft.visualstudio.debuggee.killprogram: dotnet --roll-forward Major /VSTools/DistrolessHelper/DistrolessHelper.dll --stop dotnet
      com.microsoft.visualstudio.debuggee.program: dotnet
      com.microsoft.visualstudio.debuggee.workingdirectory: /app
    networks:
      order-network: null
      service-network: null
    ports:
      - mode: ingress
        target: 700
        published: "6003"
        protocol: tcp
      - mode: ingress
        target: 8080
        protocol: tcp
      - mode: ingress
        target: 8081
        protocol: tcp
    tty: true
    volumes:
      - type: bind
        source: C:\Users\moham\AppData\Roaming\Microsoft\UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\moham\AppData\Roaming\Microsoft\UserSecrets
        target: /root/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\moham\AppData\Roaming\ASP.NET\Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\moham\AppData\Roaming\ASP.NET\Https
        target: /root/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: D:\Micro\ecommerce\eCommerceSolution.OrderService\eCommerce.API
        target: /app
        bind:
          create_host_path: true
      - type: bind
        source: D:\Micro\ecommerce\eCommerceSolution.OrderService
        target: /src
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\moham\vsdbg\vs2017u5
        target: /remote_debugger
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\moham\.nuget\packages
        target: /.nuget/packages
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages
        target: /.nuget/fallbackpackages
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\linux-x64\net6.0
        target: /VSTools
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\HotReload
        target: /HotReloadAgent
        read_only: true
        bind:
          create_host_path: true
  mongo_order:
    container_name: ecommerceorderdb
    image: mongo:latest
    networks:
      order-network: null
    ports:
      - mode: ingress
        target: 27017
        published: "27017"
        protocol: tcp
    restart: always
    volumes:
      - type: bind
        source: D:\Micro\ecommerce\ordersdb
        target: /docker-entrypoint-initdb.d
        bind:
          create_host_path: true
  postgres_product:
    container_name: ecommerceproductdb
    environment:
      POSTGRES_DB: ecommerce.products
      POSTGRES_PASSWORD: String
    hostname: postgres-productservicedb
    image: postgres:17
    networks:
      product-network: null
    ports:
      - mode: ingress
        target: 5432
        published: "5433"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: ecommerce_product_postgres
        target: /var/lib/postgresql/data
        volume: {}
  postgres_user:
    container_name: ecommerceuserdb
    environment:
      POSTGRES_DB: ecommerce.users
      POSTGRES_PASSWORD: String
    hostname: postgres-userservicedb
    image: postgres:17
    networks:
      user-network: null
    ports:
      - mode: ingress
        target: 5432
        published: "5434"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: ecommerce_user_postgres
        target: /var/lib/postgresql/data
        volume: {}
  productservice:
    container_name: ecommerce_productservice
    depends_on:
      postgres_product:
        condition: service_started
        required: true
      rabbitmq_messaging:
        condition: service_started
        required: true
    environment:
      POSTGRES_DATABASE: ecommerce.products
      POSTGRES_HOST: postgres-productservicedb
      POSTGRES_PASSWORD: String
      POSTGRES_PORT: "5432"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PASSWORD: string
      RABBITMQ_PORT: "5672"
      RABBITMQ_USERNAME: rabbitmq
    image: lotfi029/ecommerceproductservice
    networks:
      product-network: null
      service-network: null
    ports:
      - mode: ingress
        target: 8080
        published: "6002"
        protocol: tcp
    restart: always
  rabbitmq_messaging:
    container_name: ecommerce_rabbitmq
    environment:
      RABBITMQ_DEFAULT_PASS: string
      RABBITMQ_DEFAULT_USER: user
    image: rabbitmq:4.1-management
    networks:
      service-network: null
    ports:
      - mode: ingress
        target: 5672
        published: "5672"
        protocol: tcp
      - mode: ingress
        target: 15672
        published: "15672"
        protocol: tcp
  redis:
    container_name: ecommerceredis
    image: redis:latest
    networks:
      service-network: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    restart: always
    volumes:
      - type: bind
        source: D:/Micro/ecommerce/redis-cach
        target: /data
        bind:
          create_host_path: true
  userservice:
    container_name: ecommerce_userservice
    depends_on:
      postgres_user:
        condition: service_started
        required: true
    environment:
      POSTGRES_DATABASE: ecommerce.users
      POSTGRES_HOST: postgres-userservicedb
      POSTGRES_PASSWORD: String
      POSTGRES_PORT: "5432"
    image: lotfi029/ecommerceuserservice
    networks:
      service-network: null
      user-network: null
    ports:
      - mode: ingress
        target: 9090
        published: "6001"
        protocol: tcp
    restart: always
networks:
  order-network:
    name: dockercompose211186942066952291_order-network
    driver: bridge
  product-network:
    name: dockercompose211186942066952291_product-network
    driver: bridge
  service-network:
    name: dockercompose211186942066952291_service-network
    driver: bridge
  user-network:
    name: dockercompose211186942066952291_user-network
    driver: bridge
volumes:
  ecommerce_product_postgres:
    name: dockercompose211186942066952291_ecommerce_product_postgres
  ecommerce_user_postgres:
    name: dockercompose211186942066952291_ecommerce_user_postgres